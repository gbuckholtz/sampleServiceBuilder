/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ca.queensu.res.soar.portlet.model.impl;

import ca.queensu.res.soar.portlet.model.Registration;
import ca.queensu.res.soar.portlet.model.RegistrationModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Registration service. Represents a row in the &quot;SOAR_REGISTRATION_LIFERAY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ca.queensu.res.soar.portlet.model.RegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegistrationImpl}.
 * </p>
 *
 * @author gbuckholtz
 * @see RegistrationImpl
 * @see ca.queensu.res.soar.portlet.model.Registration
 * @see ca.queensu.res.soar.portlet.model.RegistrationModel
 * @generated
 */
public class RegistrationModelImpl extends BaseModelImpl<Registration>
	implements RegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a Soar Registration model instance should use the {@link ca.queensu.res.soar.portlet.model.Registration} interface instead.
	 */
	public static final String TABLE_NAME = "SOAR_REGISTRATION_LIFERAY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "student_id", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "Name", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SOAR_REGISTRATION_LIFERAY (ID LONG not null primary key,student_id VARCHAR(75) null,companyId LONG,groupId LONG,Name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SOAR_REGISTRATION_LIFERAY";
	public static final String DATA_SOURCE = "soarDataSource";
	public static final String SESSION_FACTORY = "SOARSessionFactory";
	public static final String TX_MANAGER = "SOARTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.ca.queensu.res.soar.portlet.model.Registration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.ca.queensu.res.soar.portlet.model.Registration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.ca.queensu.res.soar.portlet.model.Registration"),
			true);
	public static long NAME_COLUMN_BITMASK = 1L;
	public static long STUDENT_ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.ca.queensu.res.soar.portlet.model.Registration"));

	public RegistrationModelImpl() {
	}

	public long getPrimaryKey() {
		return _ID;
	}

	public void setPrimaryKey(long primaryKey) {
		setID(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_ID);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Registration.class;
	}

	public String getModelClassName() {
		return Registration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ID", getID());
		attributes.put("student_id", getStudent_id());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("Name", getName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ID = (Long)attributes.get("ID");

		if (ID != null) {
			setID(ID);
		}

		String student_id = (String)attributes.get("student_id");

		if (student_id != null) {
			setStudent_id(student_id);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String Name = (String)attributes.get("Name");

		if (Name != null) {
			setName(Name);
		}
	}

	public long getID() {
		return _ID;
	}

	public void setID(long ID) {
		_ID = ID;
	}

	public String getStudent_id() {
		if (_student_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _student_id;
		}
	}

	public void setStudent_id(String student_id) {
		_columnBitmask |= STUDENT_ID_COLUMN_BITMASK;

		if (_originalStudent_id == null) {
			_originalStudent_id = _student_id;
		}

		_student_id = student_id;
	}

	public String getOriginalStudent_id() {
		return GetterUtil.getString(_originalStudent_id);
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public String getName() {
		if (_Name == null) {
			return StringPool.BLANK;
		}
		else {
			return _Name;
		}
	}

	public void setName(String Name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _Name;
		}

		_Name = Name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Registration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Registration toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Registration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		RegistrationImpl registrationImpl = new RegistrationImpl();

		registrationImpl.setID(getID());
		registrationImpl.setStudent_id(getStudent_id());
		registrationImpl.setCompanyId(getCompanyId());
		registrationImpl.setGroupId(getGroupId());
		registrationImpl.setName(getName());

		registrationImpl.resetOriginalValues();

		return registrationImpl;
	}

	public int compareTo(Registration registration) {
		long primaryKey = registration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Registration registration = null;

		try {
			registration = (Registration)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = registration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RegistrationModelImpl registrationModelImpl = this;

		registrationModelImpl._originalStudent_id = registrationModelImpl._student_id;

		registrationModelImpl._originalName = registrationModelImpl._Name;

		registrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Registration> toCacheModel() {
		RegistrationCacheModel registrationCacheModel = new RegistrationCacheModel();

		registrationCacheModel.ID = getID();

		registrationCacheModel.student_id = getStudent_id();

		String student_id = registrationCacheModel.student_id;

		if ((student_id != null) && (student_id.length() == 0)) {
			registrationCacheModel.student_id = null;
		}

		registrationCacheModel.companyId = getCompanyId();

		registrationCacheModel.groupId = getGroupId();

		registrationCacheModel.Name = getName();

		String Name = registrationCacheModel.Name;

		if ((Name != null) && (Name.length() == 0)) {
			registrationCacheModel.Name = null;
		}

		return registrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{ID=");
		sb.append(getID());
		sb.append(", student_id=");
		sb.append(getStudent_id());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", Name=");
		sb.append(getName());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("ca.queensu.res.soar.portlet.model.Registration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ID</column-name><column-value><![CDATA[");
		sb.append(getID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>student_id</column-name><column-value><![CDATA[");
		sb.append(getStudent_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Registration.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Registration.class
		};
	private long _ID;
	private String _student_id;
	private String _originalStudent_id;
	private long _companyId;
	private long _groupId;
	private String _Name;
	private String _originalName;
	private long _columnBitmask;
	private Registration _escapedModelProxy;
}